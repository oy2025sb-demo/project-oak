# ===============================================================================
#              Syslog Server 
#
# Requirement: "2. Syslog Server: Develop a syslog server that listens on a 
#              custom port and performs the following actions when logs arrive:
#                   - Save each log to 
#                     /sb/logs/incoming/$year/$month/$day/$fromhost_ip/syslog.log 
#                     where $year, $month, $day are current date values and 
#                     $fromhost_ip is the sender's IP address
#                   - Analyze log content and forward any logs 
#                     containing "TRAFFIC" to a SIEM tool"
#
# Description: This config is to listen for logs from all the source VMs, save 
#              them into the directory structure defined in the homework 
#              assignment requirements, then filter for "TRAFFIC" logs and 
#              forward them to Sentinel with the help of AMA.
#
# Written by:  Olesia Y.
# ===============================================================================


# === Load Input Modules ===
# Loading the imudp input module to enable rsyslog to receive messages over UDP.
# UDP is lightweight and fast, but can be unreliable.
module(load="imudp")

# Adding the imtcp module for reliable, TCP-based reception.
# This provides clients with a more reliable transport option.
module(load="imtcp")


# === Load Output Modules ===
# Loading the omfwd output module to enable rsyslog to forward messages over the network (TCP/UDP).
# This is required for sending logs to the Azure Monitor Agent.
module(load="omfwd")
# --- !!! --- NOTE: In my demo environment *loading* this module causes an error:  
#   "rsyslogd: could not load module 'omfwd', errors: trying to load module /usr/lib/x86_64-linux-gnu/rsyslog/omfwd.so: 
#    /usr/lib/x86_64-linux-gnu/rsyslog/omfwd.so: cannot open shared object file: No such file or directory"...
# Looks like the Ubuntu image used by Azure has stripped-down rsyslog without the module. 
# However, with the line commented out, the error is resolved and the functionality still works. 
# This is an unusual behaviour, in my opinion. Cause currently unclear.
# Further investigatiion would be beneficial to understand the behaviour better. 
# Could be related to the specific distribution and rsyslogd version? 
# Use "sudo rsyslogd -N1" command to validate the config and check errors. 



# === Define Templates ===
# Template for storing incoming logs with a dynamic directory structure 
# template() defines how to name files or paths dynamically.
#   name      -> identifier - used later by the 'action' (dynafile).
#   type      -> "string" means the template expands into a text string.
#   string    -> the path pattern using rsyslog variables (year/month/day/fromhost-ip), as required by the assignment.
template(name="IncomingLogFilePath" 
         type="string" 
         string="/sb/logs/incoming/%$year%/%$month%/%$day%/%fromhost-ip%/syslog.log")

# Dedicated template for traffic logs only
# This template defines a static file path to write logs containing "TRAFFIC" to.
template(name="TrafficOnlyLogPath" 
         type="string" 
         string="/evidence/logs/incoming/traffic_only.log")


# === Define Ruleset ===
# Dedicated ruleset for the incoming logs.
# Messages bound to this ruleset will be processed here only, isolating them
# from the main rsyslog ruleset and preventing conflicts.
ruleset(name="RSIncomingFromSources") {
    
    # === BEST PRACTICE: FILTER LOCAL LOGS ===
    # This filter prevents any logs originating from the local machine (127.0.0.1)
    # from being processed by this ruleset. This ensures the ruleset is strictly
    # for external sources, which is a key architectural practice.
    if $fromhost-ip == '127.0.0.1' then stop


    # === ACTION 1: SAVE ALL INCOMING LOGS ===
    # Saving all incoming logs to the structured directory and file structure created from the template.
    #   *.* -> Selector, which matches all sources and all severities.
    #   type="omfile"    -> Writes messages to files on disk.
    #   dynafile="..."   -> Evaluates the named template per message and writes to that path.
    #   createDirs="on"  -> Automatically creates directories in the path if they don't exist.
    *.* action(type="omfile" 
               dynafile="IncomingLogFilePath" 
               createDirs="on" 
               dirCreateMode="0755" 
               fileCreateMode="0644")
    
    
    # === ACTION 2: FORWARD "TRAFFIC" LOGS TO SIEM ===
    # This section filters logs containing the string "TRAFFIC" and handles them separately.
    # We are using a TCP connection for reliability, as UDP can drop packets.
    if ($msg contains "TRAFFIC") then {
        
        # Write to traffic-only log file for extra evidence if needed.
        # This is an additional action to ensure a copy of the forwarded logs is kept locally.
        action(
            type="omfile" 
            dynafile="TrafficOnlyLogPath" 
            createDirs="on" 
            dirCreateMode="0755" 
            fileCreateMode="0644")

        # Forward the traffic logs to Sentinel SIEM with the help of AMA.
        # The Azure Monitor Agent listens on localhost port 28330 by default for syslog.
        #
        #   type="omfwd"                    -> Forward the logs over the network.
        #   target="127.0.0.1"              -> The destination is the local machine.
        #   port="28330"                    -> The specific port the AMA is listening on.
        #   protocol="tcp"                  -> Use a reliable connection to guarantee delivery.
        #
        # === Queueing Configuration for Reliability (Demo) ===
        # These parameters configure a queue to buffer logs and prevent data loss.
        # The settings are optimized for a low-resource VM (e.g., Standard_B1s)
        # but still demonstrate key reliability and observability features.
        #
        #   action.resumeRetryCount="-1"            -> Indefinitely retry to reconnect to the destination.
        #   queue.type="LinkedList"                 -> An in-memory queue, for fast processing.
        #   queue.filename="fwd-traffic-queue"      -> Defines a filename for a disk-assisted queue.
        #   queue.maxDiskSpace="250m"               -> Maximum disk space for the queue.
        #   queue.size="5000"                       -> Maximum number of messages to hold in the queue.
        #   queue.dequeueBatchSize="100"            -> Number of messages to process and send in a single batch.
        #   queue.workerThreads="1"                 -> Number of threads dedicated to sending messages from the queue.
        #   queue.saveonshutdown="on"               -> Save the queue to disk on shutdown to prevent data loss.
        #
        # === Reporting Configuration for Observability ===
        #   action.reportSuspension="on"            -> Log when the action is suspended due to an error.
        #   action.reportSuspensionContinuation="on"-> Log when the action is resumed after an error.
        #
        action(
            type="omfwd"
            target="127.0.0.1"
            port="28330"
            protocol="tcp"
            action.resumeRetryCount="-1"
            queue.type="LinkedList"
            queue.filename="fwd-traffic-queue"
            queue.maxDiskSpace="250m"
            queue.size="5000"
            queue.dequeueBatchSize="100"
            queue.workerThreads="1"
            queue.saveonshutdown="on"
            action.reportSuspension="on"
            action.reportSuspensionContinuation="on")
    }

    # === RULES: END PROCESSING ===
    # Stop all further processing of messages matched by this ruleset. This ensures that logs
    # processed by this dedicated ruleset are not passed to any other rulesets,
    # preserving the isolation of the log stream.
    stop
}


# === Define Inputs ===
# Creating an input that listens for logs on the custom UDP port and binds it to the ruleset.
input(type="imudp" port="55140" ruleset="RSIncomingFromSources")

# Adding a second input that listens for logs on a different custom TCP port, also
# bound to the custom ruleset. This provides a reliable transport option.
input(type="imtcp" port="55141" ruleset="RSIncomingFromSources")
